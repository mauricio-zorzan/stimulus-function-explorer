name: Run Tests (Drawing Functions)

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04-16core
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Poetry dependencies
        uses: actions/cache@v4 # Use v4 for performance
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # New Step: Cache Matplotlib font data
      - name: Cache Matplotlib
        uses: actions/cache@v4
        with:
          path: ~/.cache/matplotlib
          key: ${{ runner.os }}-mpl-cache-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-mpl-cache-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.5.1
      
      - name: Install dependencies
        run: |
          chmod +x .devcontainer/commands/pipeline-setup.sh
          .devcontainer/commands/pipeline-setup.sh
          sudo apt-get update && sudo apt-get install -y texlive-latex-extra dvipng cm-super jq gh
          npm i -g aws-cdk
          
      # New Step: Install pytest-xdist for parallelization (do not modify lockfile)
      - name: Install parallelization tool
        run: poetry run pip install pytest-xdist

      # Updated Step: Run tests in parallel with optimized settings
      - name: Run tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY2 }}
          PLATFORM_GRAPHQL_API_KEY: ${{ secrets.PLATFORM_GRAPHQL_API_KEY }}
          MPLBACKEND: "Agg"       # Use the fast, non-interactive backend
          FIGURE_DPI: "150"       # Lower DPI for much faster rendering
          OMP_NUM_THREADS: "1"
          OPENBLAS_NUM_THREADS: "1"
          NUMEXPR_NUM_THREADS: "1"
        run: |
          # -n 16: use 16 workers (matching the 16-core runner)
          # --dist=loadscope: efficiently group tests by fixtures
          # --durations=20: show the 20 slowest tests
          poetry run pytest -m drawing_functions -n 16 --dist=loadscope --durations=20

      - name: Upload test images as artifacts
        if: always() # Upload artifacts even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-images
          path: content/tests/*.webp